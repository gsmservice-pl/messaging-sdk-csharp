//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gsmservice.Gateway.Models.Requests
{
    using Gsmservice.Gateway.Models.Components;
    using Gsmservice.Gateway.Utils;
    using Newtonsoft.Json.Linq;
    using Newtonsoft.Json;
    using System.Collections.Generic;
    using System.Numerics;
    using System.Reflection;
    using System;
    

    public class SendSmsRequestBodyType
    {
        private SendSmsRequestBodyType(string value) { Value = value; }

        public string Value { get; private set; }
        public static SendSmsRequestBodyType Sms { get { return new SendSmsRequestBodyType("Sms"); } }
        
        public static SendSmsRequestBodyType ArrayOfSms { get { return new SendSmsRequestBodyType("arrayOfSms"); } }
        
        public static SendSmsRequestBodyType Null { get { return new SendSmsRequestBodyType("null"); } }

        public override string ToString() { return Value; }
        public static implicit operator String(SendSmsRequestBodyType v) { return v.Value; }
        public static SendSmsRequestBodyType FromString(string v) {
            switch(v) {
                case "Sms": return Sms;
                case "arrayOfSms": return ArrayOfSms;
                case "null": return Null;
                default: throw new ArgumentException("Invalid value for SendSmsRequestBodyType");
            }
        }
        public override bool Equals(object? obj)
        {
            if (obj == null || GetType() != obj.GetType())
            {
                return false;
            }
            return Value.Equals(((SendSmsRequestBodyType)obj).Value);
        }

        public override int GetHashCode()
        {
            return Value.GetHashCode();
        }
    }


    /// <summary>
    /// To send a single SMS or messages with the same content to multiple recipients, pass in the Request Body a single `Sms` object with the properties of this message. To send multiple messages with different content at the same time, pass in the Request Body an `array` of `Sms` objects with the properties of each message.
    /// </summary>
    [JsonConverter(typeof(SendSmsRequestBody.SendSmsRequestBodyConverter))]
    public class SendSmsRequestBody {
        public SendSmsRequestBody(SendSmsRequestBodyType type) {
            Type = type;
        }

        [SpeakeasyMetadata("form:explode=true")]
        public Models.Components.Sms? Sms { get; set; }

        [SpeakeasyMetadata("form:explode=true")]
        public List<Models.Components.Sms>? ArrayOfSms { get; set; }

        public SendSmsRequestBodyType Type { get; set; }


        public static SendSmsRequestBody CreateSms(Models.Components.Sms sms) {
            SendSmsRequestBodyType typ = SendSmsRequestBodyType.Sms;

            SendSmsRequestBody res = new SendSmsRequestBody(typ);
            res.Sms = sms;
            return res;
        }

        public static SendSmsRequestBody CreateArrayOfSms(List<Models.Components.Sms> arrayOfSms) {
            SendSmsRequestBodyType typ = SendSmsRequestBodyType.ArrayOfSms;

            SendSmsRequestBody res = new SendSmsRequestBody(typ);
            res.ArrayOfSms = arrayOfSms;
            return res;
        }

        public static SendSmsRequestBody CreateNull() {
            SendSmsRequestBodyType typ = SendSmsRequestBodyType.Null;
            return new SendSmsRequestBody(typ);
        }

        public class SendSmsRequestBodyConverter : JsonConverter
        {

            public override bool CanConvert(System.Type objectType) => objectType == typeof(SendSmsRequestBody);

            public override bool CanRead => true;

            public override object? ReadJson(JsonReader reader, System.Type objectType, object? existingValue, JsonSerializer serializer)
            {
                var json = JRaw.Create(reader).ToString();
                if (json == "null")
                {
                    return null;
                }

                var fallbackCandidates = new List<(System.Type, object, string)>();

                try
                {
                    return new SendSmsRequestBody(SendSmsRequestBodyType.Sms)
                    {
                        Sms = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<Models.Components.Sms>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(Models.Components.Sms), new SendSmsRequestBody(SendSmsRequestBodyType.Sms), "Sms"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                try
                {
                    return new SendSmsRequestBody(SendSmsRequestBodyType.ArrayOfSms)
                    {
                        ArrayOfSms = ResponseBodyDeserializer.DeserializeUndiscriminatedUnionMember<List<Models.Components.Sms>>(json)
                    };
                }
                catch (ResponseBodyDeserializer.MissingMemberException)
                {
                    fallbackCandidates.Add((typeof(List<Models.Components.Sms>), new SendSmsRequestBody(SendSmsRequestBodyType.ArrayOfSms), "ArrayOfSms"));
                }
                catch (ResponseBodyDeserializer.DeserializationException)
                {
                    // try next option
                }
                catch (Exception)
                {
                    throw;
                }

                if (fallbackCandidates.Count > 0)
                {
                    fallbackCandidates.Sort((a, b) => ResponseBodyDeserializer.CompareFallbackCandidates(a.Item1, b.Item1, json));
                    foreach(var (deserializationType, returnObject, propertyName) in fallbackCandidates)
                    {
                        try
                        {
                            return ResponseBodyDeserializer.DeserializeUndiscriminatedUnionFallback(deserializationType, returnObject, propertyName, json);
                        }
                        catch (ResponseBodyDeserializer.DeserializationException)
                        {
                            // try next fallback option
                        }
                        catch (Exception)
                        {
                            throw;
                        }
                    }
                }

                throw new InvalidOperationException("Could not deserialize into any supported types.");
            }

            public override void WriteJson(JsonWriter writer, object? value, JsonSerializer serializer)
            {
                if (value == null) {
                    writer.WriteRawValue("null");
                    return;
                }
                SendSmsRequestBody res = (SendSmsRequestBody)value;
                if (SendSmsRequestBodyType.FromString(res.Type).Equals(SendSmsRequestBodyType.Null))
                {
                    writer.WriteRawValue("null");
                    return;
                }
                if (res.Sms != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.Sms));
                    return;
                }
                if (res.ArrayOfSms != null)
                {
                    writer.WriteRawValue(Utilities.SerializeJSON(res.ArrayOfSms));
                    return;
                }

            }

        }

    }
}