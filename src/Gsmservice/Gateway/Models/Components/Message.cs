//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
//
// Changes to this file may cause incorrect behavior and will be lost when
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace Gsmservice.Gateway.Models.Components
{
    using Gsmservice.Gateway.Models.Components;
    using Gsmservice.Gateway.Utils;
    using Newtonsoft.Json;
    using System;
    
    /// <summary>
    /// An object defining the properties of a single message
    /// </summary>
    public class Message
    {

        /// <summary>
        /// Unique message identifier
        /// </summary>
        [JsonProperty("id")]
        public long? Id { get; set; } = null;

        /// <summary>
        /// Custom message ID assigned by the User
        /// </summary>
        [JsonProperty("cid")]
        public string? Cid { get; set; } = null;

        /// <summary>
        /// Message type according to the table:<br/>
        /// 
        /// <remarks>
        ///     <br/>
        /// |type|Description|<br/>
        /// |----|-----------|<br/>
        /// |  1 | SMS PRO   |<br/>
        /// |  3 | SMS ECO   |<br/>
        /// |  4 | SMS 2WAY  |<br/>
        /// | 10 | MMS       |
        /// </remarks>
        /// </summary>
        [JsonProperty("type")]
        public MessageType? Type { get; set; }

        /// <summary>
        /// A telephone number in international format (with a plus sign and the country code at the beginning, e.g. +48 for Poland)
        /// </summary>
        [JsonProperty("recipient")]
        public string? Recipient { get; set; }

        /// <summary>
        /// Message sender name
        /// </summary>
        [JsonProperty("sender")]
        public string? Sender { get; set; } = null;

        /// <summary>
        /// The count of parts that message consists of
        /// </summary>
        [JsonProperty("parts")]
        public long? Parts { get; set; } = null;

        /// <summary>
        /// Sending date and time (in ISO 8601 format)
        /// </summary>
        [JsonProperty("sent_date")]
        public DateTime? SentDate { get; set; } = null;

        /// <summary>
        /// Date and time of last status change (in ISO 8601 format)
        /// </summary>
        [JsonProperty("status_date")]
        public DateTime? StatusDate { get; set; } = null;

        /// <summary>
        /// Message status code
        /// </summary>
        [JsonProperty("status_code")]
        public string? StatusCode { get; set; }

        /// <summary>
        /// Human redable description of message status
        /// </summary>
        [JsonProperty("status_description")]
        public string? StatusDescription { get; set; }

        /// <summary>
        /// Did the message contain special characters, e.g. Polish diacritics?
        /// </summary>
        [JsonProperty("unicode")]
        public bool? Unicode { get; set; }

        /// <summary>
        /// Was the message sent with class 0 (FLASH)?
        /// </summary>
        [JsonProperty("flash")]
        public bool? Flash { get; set; }

        /// <summary>
        /// The price of message (in PLN)
        /// </summary>
        [JsonProperty("price")]
        public float? Price { get; set; }
    }
}